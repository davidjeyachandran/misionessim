<?php

/**
 * @file
 * Limits keyword indexing of only selected content types and nodes.
 */

 /**
  * Implements hook_help().
  */
function search_index_help($path, $arg) {
  switch ($path) {
    case 'admin/help#search_index':
      $file = drupal_get_path('module', 'search_index') . "/README.txt";
      return check_markup(file_get_contents($file), 'filtered_html');
  }
}

/**
 * Implements hook_form_alter().
 */
function search_index_form_alter(&$form, &$form_state, $form_id) {

  // Get content types included for indexing.
  $search_index_content_types = variable_get('content_type_options');
  $search_index_nodes = variable_get('node_option');

  if ($form_id == 'search_admin_settings') {
    // Make the default search module impossible to turn off and save users
    // from the core search module's complaining message.
    $form['active']['search_active_modules']['#pre_render'][] = 'search_index_disable_element';
    $form['active']['search_active_modules']['#value_callback'] = 'search_index_form_type_checkboxes_value';
    // Make only active search modules available for setting as the default one.
    foreach ($form['active']['search_active_modules']['#default_value'] as $module_name) {
      if ($module_name != '0') {
        $active[$module_name] = $form['active']['search_active_modules']['#options'][$module_name];
      }
    }
    $form['active']['search_default_module']['#options'] = $active;

    // Could pull from $search_index_content_types if already saved, however new
    // content types can be created any moment, so we build it every time.
    $node_type_get_types = node_type_get_types();
    foreach ($node_type_get_types as $type => $content_type) {
      if (isset($search_index_content_types[$type])) {
        $default_value = $search_index_content_types[$type];
      }
      else {
      $default_value = '0';
      }
      $types[$type] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($content_type->name),
        '#default_value' => $default_value,
      );
    }
    $content_type_options = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => 'Content type level indexing options',
      '#description' => t("Only nodes of the selected content types are included to the website's search index. If none selected then all nodes are indexed."),
      'search_index' => $types,
    );
    $form['content_type_options'] = $content_type_options;
    $node_index = array(
      '#type' => 'checkbox',
      '#title' => 'Enable node level indexing option?',
      '#default_value' => $search_index_nodes,
    );
    $node_option = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => 'Node level indexing option',
      '#description' => t("Enabling this will introduce a new option on node form's vertical menu to include or exclude content to/from search index."),
      'search_index' => $node_index,
    );
    $form['node_option'] = $node_option;
    $form['#submit'][] = 'search_index_settings';

    // Collect indexing stats per included content type.
    if (!empty($search_index_content_types)) {
      $report = '';
      $selected = FALSE;
      foreach ($search_index_content_types as $type => $included) {
        if ($included == TRUE) {
          $total = db_query('SELECT COUNT(*) FROM {node} WHERE type = :type', array(':type' => $type))->fetchField();
          $remaining = db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE (d.sid IS NULL OR d.reindex <> 0) AND n.type = :type", array(':type' => $type))->fetchField();
          if ($remaining != '0') {
            $count = format_plural($remaining, '<strong><em>1</em></strong> node left to index or is excluded from indexing.', '<strong><em>@count</em></strong> nodes left to index or are excluded from indexing.');
          }
          else {
            $count = '';
          }
          $percentage = ((int) min(100, 100 * ($total - $remaining) / max(1, $total))) . '%';
          // Finally output all the stats.
          $report .= '<p>' . t(
            '<strong>%percentage</strong> of <strong>%total</strong>  <em>@content-type</em> nodes have been indexed.',
            array(
              '%percentage' => $percentage,
              '%total' => $total,
              '@content-type' => $node_type_get_types[$type]->name,
            )
          )
          . ' ' . $count . '</p>';
          $selected = TRUE;
        }
      }
      if ($selected == TRUE) {
        // Collect total indexing stats.
        $remaining = 0;
        $total = 0;
        foreach (variable_get('search_active_modules', array('node', 'user')) as $module) {
          if ($status = module_invoke($module, 'search_status')) {
            $remaining += $status['remaining'];
            $total += $status['total'];
          }
        }
        $remaining_count = format_plural($remaining, '<strong>1</strong> node left to index or excluded from indexing.', '<strong>@count</strong> nodes left to index or excluded from indexing.');
        $percentage = ((int) min(100, 100 * ($total - $remaining) / max(1, $total))) . '%';
        $report .= '<p>' . t('<strong>%percentage</strong> of total <strong>%total</strong> nodes have been indexed.', array('%percentage' => $percentage, '%total' => $total)) . ' ' . $remaining_count . '</p>';
        $form['status'] = array('#type' => 'fieldset', '#title' => t('Indexing status'));
        $form['status']['status'] = array('#markup' => $report);
        // Implement the re-index button.
        $form['status']['wipe'] = array(
          '#type' => 'submit',
          '#value' => t('Re-index site'),
          '#submit' => array('search_admin_reindex_submit'),
        );
      }
    }
  }

  // Introduce UI option to exclude individual nodes ...
  if ($search_index_nodes == TRUE) {
    if (strpos($form_id, '_node_form') !== FALSE) {
      // Create a new fieldset for node's vertical tab.
      $form['search_index'] = array(
        '#type' => 'fieldset',
        '#title' => t('Search index option'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
        '#weight' => -99,
        '#group' => 'additional_settings',
        '#attached' => array(
          'js' => array(
            'vertical-tabs' => drupal_get_path('module', 'search_index') . '/js/search_index.js',
          ),
        ),
      );

      $exist = db_query('SELECT nid FROM {search_index_excluded} WHERE nid = :nid', array(':nid' => $form['nid']['#value']))->fetchField();
      if (isset($search_index_content_types[$form['#bundle']]) && $search_index_content_types[$form['#bundle']] == FALSE) {
        if (empty($exist)) {
          $default_value = FALSE;
        }
        else {
          $default_value = TRUE;
        }
      }
      else {
        if (empty($exist)) {
          $default_value = TRUE;
        }
        else {
          $default_value = FALSE;
        }
      }

      $form['search_index']['option'] = array(
        '#type' => 'checkbox',
        '#title' => t('Searchable'),
        '#default_value' => $default_value,
      );
      // Additional submit handler.
      $form['actions']['submit']['#submit'][] = 'search_index_submit';
    }
  }

  // Show only opted in content types in the advanced search form.
  if ($form_id == 'search_form' && isset($search_index_content_types)) {
    foreach ($search_index_content_types as $type => $selected) {
      if ($selected == FALSE) {
        unset($form['advanced']['type']['#options'][$type]);
      }
    }
  }

  // If node type is deleted, then update $search_index_content_types variable
  // to avoid Undefined index notice on UI.
  if ($form_id == 'node_type_delete_confirm') {
    $form['#submit'][] = 'search_index_content_type_on_delete';
  }

  // Update $search_index_content_types variable, if a node type is created.
  if ($form_id == 'node_type_form') {
    $form['#submit'][] = 'search_index_content_type_on_create';
  }
}

/**
 * Submit handler for updating $search_index_content_types.
 */
function search_index_content_type_on_delete(&$form, &$form_state) {
  $search_index_content_types = variable_get('content_type_options');
  if (isset($search_index_content_types[$form_state['complete form']['type']['#value']])) {
    unset($search_index_content_types[$form_state['complete form']['type']['#value']]);
    variable_set('content_type_options', $search_index_content_types);
  }
}

/**
 * Submit handler for updating $search_index_content_types.
 */
function search_index_content_type_on_create(&$form, &$form_state) {
  $search_index_content_types = variable_get('content_type_options');
  if (isset($search_index_content_types)) {
    $search_index_content_types[$form_state['complete form']['type']['#value']] = 0;
    variable_set('content_type_options', $search_index_content_types);
  }
}

/**
 * Submit handler for node form.
 */
function search_index_submit(&$form, &$form_state) {

  $search_index_content_types = variable_get('content_type_options');

  if (!isset($search_index_content_types)) {
    // No content type set, so all nodes are searchable.
    $normal_order = TRUE;
  }
  else {
    if ($search_index_content_types[$form['#bundle']] == TRUE) {
      $normal_order = TRUE;
    }
    else {
      $normal_order = FALSE;
    }
  }

  if ($normal_order == TRUE) {
    if ($form_state['input']['search_index']['option'] == FALSE) {
      db_merge('search_index_excluded')
      ->key(array('nid' => $form_state['values']['nid']))
      ->fields(array(
        'nid' => $form_state['values']['nid'],
        'type' => $form_state['values']['type'],
        'title' => $form_state['values']['title'],
      ))
      ->execute();
    }
    else {
      // Exclude non-searchable content type node.
      $num_deleted = db_delete('search_index_excluded')
        ->condition('nid', $form_state['values']['nid'])
        ->execute();
    }
  }
  else {
    if ($form_state['input']['search_index']['option'] == FALSE) {
      // Exclude non-searchable content type node.
      $num_deleted = db_delete('search_index_excluded')
        ->condition('nid', $form_state['values']['nid'])
        ->execute();
    }
    else {
      db_merge('search_index_excluded')
      ->key(array('nid' => $form_state['values']['nid']))
      ->fields(array(
        'nid' => $form_state['values']['nid'],
        'type' => $form_state['values']['type'],
        'title' => $form_state['values']['title'],
      ))
      ->execute();
    }
  }
}

/**
 * Submit handler for search_index_form_alter().
 */
function search_index_settings(&$form, &$form_state) {
  if (in_array(TRUE, $form_state['values']['content_type_options']['search_index'])) {
    variable_set('content_type_options', $form_state['values']['content_type_options']['search_index']);
  }
  else {
    variable_del('content_type_options');
  }
  if ($form_state['values']['node_option']['search_index'] == FALSE) {
    variable_del('node_option');
  }
  else {
    variable_set('node_option', TRUE);
  }
}

/**
 * Handler for disabling checkbox for the default search module.
 */
function search_index_disable_element($element) {
  $search_default_module = variable_get('search_default_module');
  foreach (element_children($element) as $key) {
    if ($key == $search_default_module) {
      $element[$key]['#attributes']['disabled'] = TRUE;
    }
  }
  return $element;
}

/**
 * Handler for returning value for disabled checkbox.
 */
function search_index_form_type_checkboxes_value($element, $input = FALSE) {
  if ($input !== FALSE) {
    $search_default_module = variable_get('search_default_module');
    $input[$search_default_module] = $search_default_module;
  }
  return form_type_checkboxes_value($element, $input);
}

/**
 * Implements hook_module_implements_alter().
 */
function search_index_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'cron') {
    unset($implementations['search']);
  }
}

/**
 * Implements hook_cron().
 */
function search_index_cron() {
  global $user;
  $original_user = $user;
  $old_state = drupal_save_session();
  drupal_save_session(FALSE);
  $user = user_load(1);

  // Register a shutdown function to ensure search_total is always up to date.
  drupal_register_shutdown_function('search_update_totals');

  foreach (variable_get('search_active_modules', array('node', 'user')) as $module) {
    $module == 'node' ? module_invoke('search_index', 'update_index') : module_invoke($module, 'update_index');
  }
  $user = $original_user;
  drupal_save_session($old_state);
}

/**
 * Implements hook_update_index().
 */
function search_index_update_index() {
  $limit = (int) variable_get('search_cron_limit', 100);
  // Get content types included for indexing.
  $search_index_content_types = variable_get('content_type_options');
  if (!empty($search_index_content_types)) {
    $selected = FALSE;
    foreach ($search_index_content_types as $type => $included) {
      if ($included == TRUE) {
        // Collect only selected types.
        $types[] = $type;
        $selected = TRUE;
      }
      // Collect content types just in case if none was selected.
      $all_types[] = $type;
    }
    if ($selected == FALSE) {
      // If none was selected then process all content types.
      $types = $all_types;
    }
  }
  else {
    // No content type is set on admin/config/search/settings, so let's iterate
    // and include all content types.
    $node_type_get_types = node_type_get_types();
    foreach ($node_type_get_types as $type => $included) {
      $types[] = $type;
    }
  }
  $search_index_nodes = variable_get('node_option');

  // Prepare all selected content type nodes.
  $result = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE (d.sid IS NULL OR d.reindex <> 0) AND n.type IN (:types) ORDER BY d.reindex ASC, n.nid ASC", 0, $limit, array(':types' => $types), array('target' => 'slave'));

  // Process nodes of only selected content types.
  foreach ($result as $node) {
    $opted = db_query('SELECT nid FROM {search_index_excluded} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
    if ((!isset($search_index_content_types) && !isset($search_index_nodes)) || (isset($search_index_content_types) && !isset($search_index_nodes))) {
      // None of content types or node level index enabled yet or
      // some content type in with node level off, so all must go in.
      _node_index_node($node);
    }
    elseif (!isset($search_index_content_types) && isset($search_index_nodes)) {
      // No content types, but node level index enabled.
      // Exclude opted out nodes.
      if (empty($opted)) {
        _node_index_node($node);
      }
    }
    elseif (isset($search_index_content_types) && isset($search_index_nodes)) {
      // Exclude opted out nodes.
      if ($node->nid != $opted) {
        _node_index_node($node);
      }
    }
  }

  // Process nodes of not-selected content types.
  if (isset($search_index_content_types) && isset($search_index_nodes)) {
    // Include opted in nodes of not-selected content types.
    foreach ($search_index_content_types as $type => $selected) {
      if ($selected == FALSE) {
        $opted = db_query('SELECT nid FROM {search_index_excluded} WHERE type = :type', array(':type' => $type))->fetchCol();
        if (!empty($opted)) {
          foreach ($opted as $key => $nid) {
            $node = new stdClass();
            $node->nid = $nid;
            _node_index_node($node);
          }
        }
      }
    }
  }
}
